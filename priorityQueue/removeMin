Implement the function RemoveMin for the min priority queue class.
For a minimum priority queue, write the function for removing the minimum element present. Remove and return the minimum element.





#include <vector>

class PriorityQueue {
    vector<int> pq;

   public:
    bool isEmpty() { 
        return pq.size() == 0; 
    }

    int getSize() { 
        return pq.size(); 
    }

    int getMin() {
        if (isEmpty()) {
            return 0;
        }

        return pq[0];
    }

    void insert(int element) {
        pq.push_back(element);

        int childIndex = pq.size() - 1;

        while (childIndex > 0) {
            int parentIndex = (childIndex - 1) / 2;

            if (pq[childIndex] < pq[parentIndex]) {
                int temp = pq[childIndex];
                pq[childIndex] = pq[parentIndex];
                pq[parentIndex] = temp;
            } else {
                break;
            }

            childIndex = parentIndex;
        }
    }

    int removeMin() {
         if(isEmpty()) return -1;
         int n=pq.size();
         int ans=pq[0];
         pq[0]=pq[n-1];
         int pI=0;
         int cI1=(2*pI)+1; 
         int cI2=(2*pI)+2; 
         int minIdx=-1;
         while(pI<n && cI1<n && cI2<n){
            if(pq[pI]>pq[cI1]  || pq[pI]>pq[cI2]){
              if(pq[cI1]>pq[cI2]){
                 minIdx=cI2;
              }else if(pq[cI1]<pq[cI2]){
                 minIdx=cI1;
              }
               int temp=pq[pI];
               pq[pI]=pq[minIdx];
               pq[minIdx]=temp;
            }else{
             break;
            }
            pI=minIdx; 
            cI1=(2*pI)+1;  
            cI2=(2*pI)+2;     
         }
         pq.pop_back();
         return ans;
    }
};
