Given an undirected, connected and weighted graph G(V, E) with V number of vertices (which are numbered from 0 to V-1) and E number of edges.
Find and print the Minimum Spanning Tree (MST) using Kruskal's algorithm.
For printing MST follow the steps -
1. In one line, print an edge which is part of MST in the format - 
v1 v2 w
where, v1 and v2 are the vertices of the edge which is included in MST and whose weight is w. And v1  <= v2 i.e. print the smaller vertex first while printing an edge.
2. Print V-1 edges in above format in different lines.
Note : Order of different edges doesn't matter.
Input Format :
Line 1: Two Integers V and E (separated by space)
Next E lines : Three integers ei, ej and wi, denoting that there exists an edge between vertex ei and vertex ej with weight wi (separated by space)
Output Format :
Print the MST, as described in the task.
Constraints :
2 <= V, E <= 10^5
Time Limit: 1 sec
Sample Input 1 :
4 4
0 1 3
0 3 5
1 2 1
2 3 8
Sample Output 1 :
1 2 1
0 1 3
0 3 5





#include <iostream>
#include<algorithm>
using namespace std;

class Kruskal{
    public:
    int source;
    int destination;
    int w;

};

bool sort_w(Kruskal &a, Kruskal &b){
    if(a.w>b.w) return false;
    else return true;
}

int main(){
    int v,e;
    cin>>v>>e;
    Kruskal *input=new Kruskal[e];
    for(int i=0;i<e;i++){
        int ei,ej,wi;
        cin>>ei>>ej>>wi;
        input[i].source=ei;
        input[i].destination=ej;
        input[i].w=wi;
    }
    sort(input,input+e, sort_w);
    // for(int i=0;i<v;i++) cout<<input[i].source<<" "<<input[i].destination<<" "<<input[i].w<<endl;
    Kruskal*output=new Kruskal[v-1];
    int ct=0;
    int*parent=new int[v];
    for(int i=0;i<v;i++) parent[i]=i;
    int x=0;
    while(ct!=v-1){
        Kruskal edge=input[x];
        int a=edge.source;
        int b=edge.destination;
        int c=edge.w;
        int p1=a;
        int p2=b;
        while(p1!=parent[p1]){
           p1=parent[p1];
        } 
        while(p2!=parent[p2]){
           p2=parent[p2];
        }
        if(p1!=p2){
            parent[p2]=p1;
            output[ct].source=a;
            output[ct].destination=b;
            output[ct].w=c;
            ct++;
        }
        x++;
    }
    for(int i=0;i<v-1;i++){
        if(output[i].source<output[i].destination){
          cout << output[i].source << " " << output[i].destination << " "
               << output[i].w << endl;
        }else{
          cout << output[i].destination << " " << output[i].source << " "
               << output[i].w << endl;
        }
    } 
     
}
