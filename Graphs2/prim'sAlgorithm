Given an undirected, connected and weighted graph G(V, E) with V number of vertices (which are numbered from 0 to V-1) and E number of edges.
Find and print the Minimum Spanning Tree (MST) using Prim's algorithm.
For printing MST follow the steps -
1. In one line, print an edge which is part of MST in the format - 
v1 v2 w
where, v1 and v2 are the vertices of the edge which is included in MST and whose weight is w. And v1  <= v2 i.e. print the smaller vertex first while printing an edge.
2. Print V-1 edges in above format in different lines.
Note : Order of different edges doesn't matter.
Input Format :
Line 1: Two Integers V and E (separated by space)
Next E lines : Three integers ei, ej and wi, denoting that there exists an edge between vertex ei and vertex ej with weight wi (separated by space)
Output Format :
Print the MST, as described in the task.
Constraints :
2 <= V, E <= 10^5
1 <= Wi <= 10^5
Time Limit: 1 sec
Sample Input 1 :
4 4
0 1 3
0 3 5
1 2 1
2 3 8
Sample Output 1 :
0 1 3
1 2 1
0 3 5








#include <iostream>
#include<climits>
using namespace std;

int findMin(int *wt,int v,bool*visited){
  int ans=0,x=INT_MAX;
  for(int k=0;k<v;k++){
        if(wt[k]<x && !visited[k]){
                  ans=k;
                  x=wt[k];
        }
   }
   return ans;
}

int main(){
    int v,e;
    cin>>v>>e;
    int **arr=new int*[v];
    for(int i=0;i<v;i++){
        arr[i]=new int[v];
        for(int j=0;j<v;j++){
            arr[i][j]=0;
        }
    }
    for(int i=0;i<e;i++){
        int a,b,w;
        cin>>a>>b>>w;
        arr[a][b]=w;
        arr[b][a]=w;
    }
    bool *visited=new bool[v]; 
    int *wt=new int[v];
    int *parent=new int[v];
    parent[0]=-1;
    for (int i =0; i < v; i++){
      visited[i] = false;
      wt[i] = INT_MAX;
    }
    wt[0]=0;
    for(int i=0;i<(v-1);i++){
        int a=findMin(wt,v,visited);
        visited[a]=true; 
          for(int j = 0; j < v; j++){
                if(arr[a][j] != 0 && !visited[j]){
                    if(wt[j]>arr[a][j]){
                            wt[j]=arr[a][j];
                            parent[j]=a;
                    }
                }
           }
    }
    for(int i=1;i<v;i++){
        if(parent[i]>i){
            cout<<i<<" "<<parent[i]<<" "<<wt[i]<<endl;
        }else{
            cout<<parent[i]<<" "<<i<<" "<<wt[i]<<endl;
        }
    }
}
