Given a binary tree with N number of nodes, check if that input tree is BST (Binary Search Tree). If yes, return true, return false otherwise.
Note: Duplicate elements should be kept in the right subtree.
Input format :
The first line of input contains data of the nodes of the tree in level order form. The data of the nodes of the tree is separated by space. If any node does not have a left or right child, take -1 in its place. Since -1 is used as an indication whether the left or right nodes exist, therefore, it will not be a part of the data of any node.
Output format :
The first and only line of output contains either true or false.
Constraints :
Time Limit: 1 second
Sample Input 1 :
3 1 5 -1 2 -1 -1 -1 -1
Sample Output 1 :
true




#include<climits>
/**********************************************************
	Following is the Binary Tree Node class structure

	template <typename T>
	class BinaryTreeNode {
    	public : 
    	T data;
    	BinaryTreeNode<T> *left;
    	BinaryTreeNode<T> *right;

    	BinaryTreeNode(T data) {
        	this -> data = data;
        	left = NULL;
        	right = NULL;
    	}
	};

***********************************************************/
// class Pair{
//     public:
//     int leftData;
//     int rightData;
//     bool flag;
//     Pair(){
//         leftData=INT_MIN;
//         rightData=INT_MAX;
//         flag=true;
//     }
// }; 

// Pair helper(BinaryTreeNode<int>* root){
//     if(root==NULL){
//         Pair s;
//         return s;
//     }
//     Pair left=helper(root->left);
//     Pair right=helper(root->right);
//     int maximum=max(root->data , max(left.leftData , right.leftData));
//     int minimum=min(root->data , min(left.rightData , right.rightData));
//     int isBST=false;
//     if(left.flag && right.flag && (root->data>left.leftData && root->data<=right.rightData)) isBST=true;
//     Pair ans;
//     ans.leftData=maximum;
//     ans.rightData=minimum;
//     ans.flag=isBST;
//     return ans;
// }

// bool isBST(BinaryTreeNode<int> *root){
//     Pair ans=helper(root);
//     return ans.flag;
// }


// int maximum(BinaryTreeNode<int> *root){
//     if(root==NULL) return INT_MIN;
//     return max(root->data , max(maximum(root->left) , maximum(root->right)));
// }

// int minimum(BinaryTreeNode<int> *root){
//     if(root==NULL) return INT_MAX;
//     return min(root->data , min(minimum(root->left) , minimum(root->right)));
// }


// bool isBST(BinaryTreeNode<int> *root){
//     if(root==NULL) return true;
//     int leftMax=maximum(root->left);
//     int rightMin=minimum(root->right);
//     return root->data>leftMax && root->data<=rightMin && isBST(root->left) && isBST(root->right);
// }


bool isBST(BinaryTreeNode<int> *root , int min=INT_MIN , int max=INT_MAX){
    if(root==NULL) return true;
    if(root->data<min || root->data>max) return false;
    return isBST(root->left , min , root->data-1) && isBST(root->right , root->data , max);
}
