For a given postorder and inorder traversal of a Binary Tree of type integer stored in an array/list, create the binary tree using the given two arrays/lists. You just need to construct the tree and return the root.
Note:
Assume that the Binary Tree contains only unique elements. 
Input Format:
The first line of input contains an integer N denoting the size of the list/array. It can also be said that N is the total number of nodes the binary tree would have.

The second line of input contains N integers, all separated by a single space. It represents the Postorder-traversal of the binary tree.

The third line of input contains N integers, all separated by a single space. It represents the inorder-traversal of the binary tree.
Output Format:
The given input tree will be printed in a level order fashion where each level will be printed on a new line. 
Elements on every level will be printed in a linear fashion. A single space will separate them.
Constraints:
1 <= N <= 10^4
Where N is the total number of nodes in the binary tree.

Time Limit: 1 sec
Sample Input 1:
7
4 5 2 6 7 3 1 
4 2 5 1 6 3 7 
Sample Output 1:
1 
2 3 
4 5 6 7 





/***********************************************************
	Following is the Binary Tree Node class structure

	template <typename T>
	class BinaryTreeNode {
    	public : 
    	T data;
    	BinaryTreeNode<T> *left;
    	BinaryTreeNode<T> *right;

    	BinaryTreeNode(T data) {
        	this -> data = data;
        	left = NULL;
        	right = NULL;
    	}
	};

***********************************************************/
BinaryTreeNode<int>* helper(int *postorder , int*inorder , int ps , int pe , int is , int ie){
    if(is>ie) return NULL;
    int rootData=postorder[pe];
    int rootIdx;
    for(int i=is;i<=ie;i++){
        if(inorder[i]==rootData){
            rootIdx=i;
            break;
        } 
    }
    int lis=is;
    int lie=rootIdx-1;
    int lps=ps;
    int lpe=ps+(lie-lis);
    int ris=rootIdx+1;
    int rie=ie;
    int rps=lpe+1;
    int rpe=pe-1;
    BinaryTreeNode<int>*root=new BinaryTreeNode<int>(rootData);
    root->left=helper(postorder , inorder , lps , lpe , lis , lie);
    root->right=helper(postorder , inorder , rps , rpe , ris , rie);
    return root;
}


BinaryTreeNode<int>* buildTree(int *postorder, int postLength, int *inorder, int inLength) {
    return helper(postorder , inorder , 0 , postLength-1 , 0 , inLength-1);
}
