For a given Binary Tree of type integer, update it with its corresponding mirror image.
Example:
Alt text

Input Format:
The first and the only line of input will contain the node data, all separated by a single space. Since -1 is used as an indication whether the left or right node data exist for root, it will not be a part of the node data.
Output Format:
The only line of output prints the mirrored tree in a level-wise order. 
Each level will be printed on a new line. Elements printed at each level will be separated by a single line.
Note:
You are not required to print anything explicitly. It has already been taken care of.
Constraints:
1 <= N <= 10^5
Where N is the total number of nodes in the binary tree.

Time Limit: 1 sec
Sample Input 1:
1 2 3 4 5 6 7 -1 -1 -1 -1 -1 -1 -1 -1
Sample Output 1:
1 
3 2 
7 6 5 4




/**********************************************************
	Following is the Binary Tree Node class structure

	template <typename T>
	class BinaryTreeNode {
    	public : 
    	T data;
    	BinaryTreeNode<T> *left;
    	BinaryTreeNode<T> *right;

    	BinaryTreeNode(T data) {
        	this -> data = data;
        	left = NULL;
        	right = NULL;
    	}
	};

***********************************************************/
// void mirrorBinaryTree(BinaryTreeNode<int>* root) {
//    if(root==NULL)
//        return;
//     if(root->left==NULL && root->right==NULL)
//         return;
//     mirrorBinaryTree(root->left);
//     mirrorBinaryTree(root->right);
    
//     BinaryTreeNode<int> * tempL = root->left;
//     root->left=root->right;
//     root->right=tempL;
    
// }
void change(BinaryTreeNode<int>** root1 , BinaryTreeNode<int>** root2){
    BinaryTreeNode<int>*temp=*root1;
    *root1=*root2;
    *root2=temp;
    return ;
}

void mirrorBinaryTree(BinaryTreeNode<int>* root) {
    if(root==NULL) return;
    mirrorBinaryTree(root->left);
    mirrorBinaryTree(root->right);
    change( &(root->left),&(root->right) );
    
}
