It's Gary's birthday today and he has ordered his favourite square cake consisting of '0's and '1's . But Gary wants the biggest piece of '1's and no '0's . A piece of cake is defined as a part which consist of only '1's, and all '1's share an edge with each other on the cake. Given the size of cake N and the cake, can you find the count of '1's in the biggest piece of '1's for Gary ?
Input Format :
The first line of input contains an integer, that denotes the value of N. 
Each of the following N lines contain N space separated integers.
Output Format :
Print the count of '1's in the biggest piece of '1's, according to the description in the task.
Constraints :
1 <= N <= 1000
Time Limit: 1 sec
Sample Input 1:
2
1 1
0 1
Sample Output 1:
3





#include <queue>
#include<climits>


// int bfs(vector<vector<int>> &arr, bool**visited, int n, int i,
//         int j) {
//   queue<pair<int, int>> q;
//   q.push({i, j});
//   int offset[4][2] = {{-1, 0}, {0, -1}, {0, 1}, {1, 0}};
//   int count = 1;
//   visited[i][j] = true;
//   while (!q.empty()) {
//     auto curr = q.front();
//     q.pop();
//     int a=curr.first;
//     int b=curr.second;
//      for (int k = 0; k < 4; k++) {
//       int row = a + offset[k][0];
//       int col = b + offset[k][1];
//       if (row < n && col < n && row >= 0 && col >= 0 &&
//           !visited[row][col] && arr[row][col] == 1) {
//         visited[row][col] = true;
//         count++;
//         q.push({row, col});
//       }
//     }
//   }
//   return count;
// }

// int getBiggestPieceSize(vector<vector<int>> &cake, int n) {

//   bool**visited=new bool*[n];
//   for(int i=0;i<n;i++){
//       visited[i]=new bool[n];
//       for(int j=0;j<n;j++){
//           visited[i][j]=false;
//       }
//   }
//   int ans = INT_MIN;

//   for (int i = 0; i < n; i++) {
//     for (int j = 0; j < n; j++) {
//       if (cake[i][j] == 1 && !visited[i][j]) {
//         ans = max(ans, bfs(cake, visited, n, i, j));
//       }
//     }
//   }
//   return ans;
// }

void helper(vector<vector<int>> &cake, int n,int &k,int i,int j){
    cake[i][j]=0;
    k++;
    if(i-1>=0 && cake[i-1][j]) helper(cake ,n,k,i-1,j);
    if (j-1 >= 0 && cake[i][j-1])
      helper(cake, n, k, i , j-1);
    if (j+1<n && cake[i][j+1])
      helper(cake, n, k, i , j+1);
    if (i +1<n && cake[i+1][j])
      helper(cake, n, k, i +1, j);
}

int getBiggestPieceSize(vector<vector<int>> &cake, int n) {
  int ans=INT_MIN;
  for(int i=0;i<n;i++){
    for(int j=0;j<n;j++){
        if(cake[i][j]){
          int k=0;
          helper(cake , n ,k,i,j);
          ans=max(ans,k);
        }
    }
  }
  return ans;
}
