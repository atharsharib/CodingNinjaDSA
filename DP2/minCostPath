An integer matrix of size (M x N) has been given. Find out the minimum cost to reach from the cell (0, 0) to (M - 1, N - 1).
From a cell (i, j), you can move in three directions:
1. ((i + 1),  j) which is, "down"
2. (i, (j + 1)) which is, "to the right"
3. ((i+1), (j+1)) which is, "to the diagonal"
The cost of a path is defined as the sum of each cell's values through which the route passes.
 Input format :
The first line of the test case contains two integer values, 'M' and 'N', separated by a single space. They represent the 'rows' and 'columns' respectively, for the two-dimensional array/list.

The second line onwards, the next 'M' lines or rows represent the ith row values.

Each of the ith row constitutes 'N' column values separated by a single space.
Output format :
Print the minimum cost to reach the destination.
Constraints :
1 <= M <= 10 ^ 2
1 <= N <=  10 ^ 2

Time Limit: 1 sec
Sample Input 1 :
3 4
3 4 1 2
2 1 8 9
4 7 8 1
Sample Output 1 :
13






// int helper(int **input , int m , int n , int i , int j,int **arr){
//       if(i>=m || j>=n) return INT_MAX;
//       if(i==m-1 && j==n-1){
//            return input[i][j];
//       }
//       if(arr[i][j]!=-1) return arr[i][j];
//       int x=helper(input,m , n , i+1 ,j , arr);
//       int z=helper(input,m,n,i+1,j+1,arr);
//       int y=helper(input,m ,n ,i,j+1,arr);
//       arr[i][j]=input[i][j]+min(x,min(y,z));
//       return arr[i][j];
// };

// int minCostPath(int **input, int m, int n) {
//      int**arr=new int*[m];
//      for(int i=0;i<m;i++){
//           arr[i]=new int[n];
//           for(int j=0;j<n;j++){
//                arr[i][j]=-1;
//           }
//      }
//      return helper(input , m , n , 0 ,0 ,arr);
// }

int minCostPath(int **input, int m, int n){
     int**arr=new int*[m];
     for(int i=0;i<m;i++){
          arr[i]=new int[n];
          for(int j=0;j<n;j++){
               arr[i][j]=-1;
          }
     }
     arr[0][0]=input[0][0];
     for(int i=0;i<m;i++){
          for(int j=0;j<n;j++){
               int a=INT_MAX,b=INT_MAX,c=INT_MAX;
               if(i==0 && j==0){
                    continue;
               }
               if(i-1>=0) a=arr[i-1][j];
               if(i-1>=0 && j-1>=0) b=arr[i-1][j-1];
               if(j-1>=0) c=arr[i][j-1];
               arr[i][j]=input[i][j]+min(a,min(b,c));
          }
     }
     return arr[m-1][n-1];
}
