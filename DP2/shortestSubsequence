Gary has two string S and V. Now, Gary wants to know the length shortest subsequence in S, which is not a subsequence in V.
Note: The input data will be such that there will always be a solution.
Input Format :
The first line of input contains a string, that denotes the value of S. The following line contains a string, that denotes the value of V.
Output Format :
Length of shortest subsequence in S such that it is not a subsequence in V
Constraints:
1 <= |S| <= 1000 (|x| implies the length of the string x)
1 <= |V| <= 1000 
Time Limit: 1 second
Sample Input 1:
babab
babba
Sample Output 1:
3
Explanation:
"aab" is the shortest subsequence which is present in S and absent in V.






// int helper(int**arr,string s , string v,int m ,int n){
//   if (s.size() == 0)
//     return 1001;
//   if (v.size() <= 0)
//     return 1;
//   if(arr[m][n]!=-1) return arr[m][n];  
//   int x = helper(arr,s.substr(1), v,m-1,n);
//   int i = 0;
//   while (s[0] != v[i] && i < v.size())
//     i++;
//   if (i == v.size())
//     return 1;
//   int y = helper(arr,s.substr(1), v.substr(i + 1),m-1,n-i-1);
//   arr[m][n] = min(x, 1 + y);
//   return arr[m][n];
// }

// int solve(string s, string v) {
//     int m=s.size();
//     int n=v.size();
//     int**arr=new int*[m+1];
//     for(int i=0;i<=m;i++){
//         arr[i]=new int[n+1];
//         for(int j=0;j<=n;j++){
//             arr[i][j]=-1;
//         }
//     }
//     return helper(arr,s,v,m,n);
// }

int solve(string s, string v){
  int m = s.size();
  int n=v.size();
  int past[m+1][n+1]={0};
  for(int i=0;i<m;i++){
      for(int j=0;j<n;j++){
          if(v[j]==s[i]) past[i+1][j+1]=j;
          past[i+1][j+1]=-1;
      }
  }
  int **arr = new int *[m + 1];
  for(int i=0;i<=m;i++){
      arr[i]=new int[n+1];
  }
  for(int i=1;i<=m;i++) arr[i][0]=1;
  for(int j=0;j<=n;j++) arr[0][j]=1001;
  for(int i=1;i<=m;i++){
      for(int j=1;j<=n;j++){
          if(past[i][j]==-1){
                arr[i][j]=1;
          }else{
                arr[i][j]=min(arr[i-1][j] ,1+arr[i-1][pas]); 
          }
      }
  }
  return arr[m][n];
}
