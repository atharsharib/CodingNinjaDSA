Given an NxM matrix that contains only 0s and 1s, find out the size of the maximum square sub-matrix with all 0s. You need to return the size of the square matrix with all 0s.
Input format :
The first line of the test case contains two integer values, 'N' and 'M', separated by a single space. They represent the 'rows' and 'columns' respectively.

Second-line onwards, the next 'N' lines or rows represent the ith row values.

Each of the ith rows constitutes column values separated by a single space (Either 0 or 1).
Output Format:
Print the size of maximum square sub-matrix.
 Constraints :
0 <= N <= 10^4
0 <= M <= 10^4

Time Limit: 1 sec
Sample Input 1:
3 3
1 1 0
1 1 1
1 1 1
Sample Output 1:
1





// int helper(int**arr,int n,int m,int i,int j,int **ans){
// 	if(i>=n || j>=m) return 0;
// 	if(ans[i][j]!=-1) return ans[i][j];
//     int x = helper(arr, n, m,  i, j+1,ans);
//     int y = helper(arr, n, m,  i + 1, j+1,ans);
//     int z=helper(arr,n,m,i+1,j,ans);
//     if(!arr[i][j]){
//          ans[i][j]=1+min(x,min(y,z));
// 		 return ans[i][j];
// 	}else{
// 		return 0;
// 	}
	
// }

// int findMaxSquareWithAllZeros(int **arr, int n, int m)
// {
// 	int **ans=new int*[n];
// 	for(int i=0;i<n;i++){
// 		ans[i]=new int[m];
// 		for(int j=0;j<m;j++){
// 			ans[i][j]=-1;
// 		}
// 	}
// 	helper(arr,n,m,0,0,ans);
// 	int mx=0;
// 	for(int i=0;i<n;i++){
// 		for(int j=0;j<m;j++){
// 			if(ans[i][j]>mx) mx=ans[i][j];
// 		}
// 	}
// 	return mx;
// }


int findMaxSquareWithAllZeros(int **arr, int n, int m){
	int **mat=new int*[n];
	for(int i=0;i<n;i++) mat[i]=new int[m];
	for(int i=0;i<n;i++){
		if(!arr[i][0]) mat[i][0]=1;
		else mat[i][0]=0;
	}
    for(int i=1;i<m;i++){
			if(!arr[0][i]) mat[0][i]=1;
	    	else mat[0][i]=0;
	} 
	for(int i=1;i<n;i++){
		for(int j=1;j<m;j++){
			if(!arr[i][j]){
                mat[i][j]=1+min(mat[i-1][j] , min(mat[i-1][j-1],mat[i][j-1]));
			}else{
				mat[i][j]=0;
			}
		}
	} 
   	int mx=0;
	for(int i=0;i<n;i++){
		for(int j=0;j<m;j++){
			if(mat[i][j]>mx) mx=mat[i][j];
		}
	}
	return mx;
}
