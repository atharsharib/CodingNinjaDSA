//YOUR CODE

//iterative method

Node*reverse(Node*head , int i){
    if(head==NULL || head->next==NULL || i==0) return head;
    Node*ans=reverse(head->next , i-1);
    Node*temp=head->next;
    temp->next=head;
    head->next=NULL;
    head=ans;
    return head;
}


Node *kReverse(Node *head, int k)
{
    if(head==NULL || head->next==NULL || k==1 || k==0) return head;
	Node*fh=head;
    Node*th=head;
    Node*prev=NULL;
    int j=k-1;
    int flag=0;
     Node*x=NULL;
     Node*y=NULL;
    while(th!=NULL){
        while(j-- && th!=NULL){
            th=th->next;
        }
        if(th==NULL)   x=NULL;
        else           x=th->next;
        y=reverse(fh , k-1);
        if(flag==0){
            flag=1;
            head=y;
            fh->next=x;   
        }else{
            prev->next=y;   
            fh->next=x;   
        }
        prev=fh;
        fh=x;th=fh;
        j=k-1;
    }
    return head;
}

//RECURSIVE method



//Main Code
#include <iostream>

class Node
{
public:
	int data;
	Node *next;
	Node(int data)
	{
		this->data = data;
		this->next = NULL;
	}
};

using namespace std;
#include "solution.h"

Node *takeinput()
{
	int data;
	cin >> data;
	Node *head = NULL, *tail = NULL;
	while (data != -1)
	{
		Node *newnode = new Node(data);
		if (head == NULL)
		{
			head = newnode;
			tail = newnode;
		}
		else
		{
			tail->next = newnode;
			tail = newnode;
		}
		cin >> data;
	}
	return head;
}

void print(Node *head)
{
	Node *temp = head;
	while (temp != NULL)
	{
		cout << temp->data << " ";
		temp = temp->next;
	}
	cout << endl;
}

int main()
{
	int t;
	cin >> t;

	while (t--)
	{
		Node *head = takeinput();
		int k;
		cin >> k;
		head = kReverse(head, k);
		print(head);
	}
	
	return 0;
}
